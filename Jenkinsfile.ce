pipeline {
  agent {
    label 'sharelatex'
  }
  environment {
    DOCKER_COMPOSE_FLAGS = "-f docker-compose.ci.yml"
    IMAGE_CI = "ci/clsi:$BRANCH_NAME-$BUILD_NUMBER"
  }

  stages {
    stage('Prepare environment') {
      stages {
        stage('Clean Previous artifacts') {
          steps {
            sh 'git clean -xdf'
          }
        }
        stage('Pull Texlive') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS != null
            }
          }
          options {
            timeout(time: 2, unit: 'HOURS')
          }
          environment {
            TEXLIVE_IMAGE = "$SHARELATEX_DOCKER_REPOS/texlive:full-2017"
          }
          steps {
            sh  '''
                set -ex
                docker pull $TEXLIVE_IMAGE \
                || (
                  docker build \
                    -t $TEXLIVE_IMAGE \
                    --build-arg TEXLIVE_SCHEME=full \
                    https://github.com/das7pad/sharelatex-docker-images.git#:texlive \
                  && \
                  docker push $TEXLIVE_IMAGE
                )
                '''
            sh 'docker tag $TEXLIVE_IMAGE quay.io/sharelatex/texlive-full:2017.1'
          }
        }
        stage('Build Texlive') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS == null
            }
          }
          options {
            timeout(time: 2, unit: 'HOURS')
          }
          steps {
            sh  '''
                docker build \
                  -t quay.io/sharelatex/texlive-full:2017.1 \
                  --build-arg TEXLIVE_SCHEME=full \
                  https://github.com/das7pad/sharelatex-docker-images.git#:texlive
                '''
          }
        }
        stage('Pull Cache') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS != null
            }
          }
          environment {
            IMAGE_BRANCH = "$SHARELATEX_DOCKER_REPOS/clsi:$BRANCH_NAME"
            IMAGE_BRANCH_DEV = "$SHARELATEX_DOCKER_REPOS/clsi:dev"
          }
          steps {
            sh '''
              docker pull $IMAGE_BRANCH \
              && docker tag $IMAGE_BRANCH $IMAGE_CI-cache \
              && docker rmi $IMAGE_BRANCH \
              || (docker pull $IMAGE_BRANCH_DEV \
              && docker tag $IMAGE_BRANCH_DEV $IMAGE_CI-cache \
              && docker rmi $IMAGE_BRANCH_DEV) \
              || true
            '''
            sh '''
              docker pull $IMAGE_BRANCH-build \
              && docker tag $IMAGE_BRANCH-build $IMAGE_CI-build-cache \
              && docker rmi $IMAGE_BRANCH-build \
              || (docker pull $IMAGE_BRANCH_DEV-build \
              && docker tag $IMAGE_BRANCH_DEV-build $IMAGE_CI-build-cache \
              && docker rmi $IMAGE_BRANCH_DEV-build) \
              || true
            '''
          }
        }
      }
    }
    stage('CI') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      stages {
        stage('Build') {
          steps {
            sh 'make build'
          }
        }

        stage('Unit Tests') {
          steps {
            sh 'make test_unit'
          }
        }

        stage('Acceptance Tests') {
          steps {
            sh 'make test_acceptance'
          }
          post {
            cleanup {
              sh 'make clean_test_acceptance'
            }
          }
        }
      }
    }

    stage('Submit results') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      stages {
        stage('docker push') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS != null
            }
          }
          environment {
            IMAGE = "$SHARELATEX_DOCKER_REPOS/clsi:$BRANCH_NAME-$BUILD_NUMBER"
            IMAGE_BRANCH = "$SHARELATEX_DOCKER_REPOS/clsi:$BRANCH_NAME"
          }
          steps {
            sh 'docker tag $IMAGE_CI $IMAGE'
            sh 'docker push $IMAGE'
            sh 'docker tag $IMAGE $IMAGE_BRANCH'
            sh 'docker push $IMAGE_BRANCH'
            sh 'docker tag $IMAGE_CI-build $IMAGE_BRANCH-build'
            sh 'docker push $IMAGE_BRANCH-build'
            sh 'docker rmi $IMAGE $IMAGE_BRANCH $IMAGE_BRANCH-build'
          }
        }
      }
    }
  }

  post {
    cleanup {
      sh 'make test_clean'
      sh 'make clean'
    }
  }
}
